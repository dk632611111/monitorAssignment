

- Why syncrchonized?
  -- Not needed because: "there is a "request" scope that will create a new instance of a bean for each HTTP request"
- Why @CrossOrigin?
  -- So that a browser whose page was loaded from a different domain:port will be able to access our service
- What does @Valid @PollingRate return if invalid?
  {
    "timestamp": "2019-03-17T17:43:14.036+0000",
    "status": 500,
    "error": "Internal Server Error",
    "message": "createCallerWithOutage.pollingRateSec: The polling rate must be 1 second or greater",
    "path": "/v1/caller/create"
  } 
  
- Bugs
   - CallerControllerTest.testCreateCallerWithNonRunningTcpServiceButwithGracePeriod()
     -- Should have pause after creating thread so grace period tested
   - CallerService.isGracePeriodExceeded()
     -- Should have >= in last if statement
   - Validator not working
     -- Must put @Validated on CallerController class
   - In controller, optional primitive values should have defaults:
     defaultValue="0"

- Improvements
  - pass in caller host
  - Use RMM to use correct Get, Post, Put and Delete
  - Try closeables should be used instead of finally
  - Pass in interfaces instead of services to constructors
  - Use Optionals
  - Add @Nullable and @Nonnull
  - Instead of  return new ResponseEntity<>(message.getMessage(), message.getHttpStatus()); should
    return a "created" or 201 HttpStatus, so SuccessEnum should have status codes per type of action.
  - Have poll only on change
    - In TcpServiceEntity have lastStatus field that will hold "running" or "not running"
    - In CallerService.isPollingRequired only return true if lastStatus doesn't current status
  - If caller dies
    -- Have NotificationService delete the caller because can't create a socket

- Global error handler
  -- see Udemy: 
     -- @ControllerAdvice
        public class RestExceptionHandler extends ResponseEntityExceptionHandler {

              @ExceptionHandler(ResourceNotFoundException.class)
              public ResponseEntity<Object> handleResourceNotFoundException(ResourceNotFoundException exception) {
                 exception.printStackTrace();
                 return getApiResponseEntity(HttpStatus.NOT_FOUND, exception.getErrorCode(), exception.getLocalizedMessage());
              }

        
         @ResponseStatus(HttpStatus.NOT_FOUND)
         public class ResourceNotFoundException extends TaxTokenException {

     -- https://www.udemy.com/microservices-with-spring-boot-and-spring-cloud/learn/v4/t/lecture/8005638?start=0

- Million callers
  - Autoscaling
   -- Best overview: https://www.youtube.com/watch?v=UT88Ojx-TLk
    --- Kubernetes
        ---- Platform for managing containerized services
    --- AWS EKS (Elastic Kubernetes Service)
    --- AWS Fargate
    












